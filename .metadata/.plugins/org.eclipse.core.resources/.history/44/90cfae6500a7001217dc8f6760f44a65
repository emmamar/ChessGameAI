import Piece
from Move import Move

class Pawn(Piece.Piece):
  def __init__(self, c, px, py):
    self.color = c
    self.posX = px
    self.posY = py
    self.first_move = True
    if(self.color == "B"):
      self.table = [0,   0,   0,   0,   0,   0,  0,  0,
                                 50, 50,  50,  50,  50,  50, 50, 50,
                                 10, 10,  20,  30,  30,  20, 10, 10,
                                 5,   5,  10,  27,  27,  10,  5,  5,
                                 0,   0,   0,  25,  25,   0,  0,  0,
                                 5,  -5, -10,   0,   0, -10, -5,  5,
                                 5,  10,  10, -25, -25,  10, 10,  5,
                                 0,   0,   0,   0,   0,   0,  0,  0]
      
     else:
       self.table = [0,   0,   0,   0,   0,   0,   0,   0,
                                 5,  10,  10, -25, -25,  10,  10,   5,
                                 5,  -5, -10,   0,   0, -10,  -5,   5,
                                 0,   0,   0,  25,  25,   0,   0,   0,
                                 5,   5,  10,  27,  27,  10,   5,   5,
                                10,  10,  20,  30,  30,  20,  10,  10,
                                50,  50,  50,  50,  50,  50,  50,  50,
                                 0,   0,   0,   0,   0,   0,   0,   0]}
    
   
  def get_available_moves_specific(self, board):
    available = list()
    if self.color == "B":
      if board.matrix[self.posX - 1][self.posY] == None:
        available.append(Move(self.posX, self.posY, self.posX - 1, self.posY))
        if(self.posX == 6
        and board.matrix[self.posX - 2][self.posY] == None):
          available.append(Move(self.posX, self.posY, self.posX - 2, self.posY))
      if(self.posY < 7 and
      (not board.matrix[self.posX - 1][self.posY + 1] == None
      and board.matrix[self.posX - 1][self.posY + 1].color == "W")):
        available.append(Move(self.posX, self.posY, self.posX - 1, self.posY + 1))
      if(self.posY > 0 and
      (not board.matrix[self.posX - 1][self.posY - 1] == None
      and board.matrix[self.posX - 1][self.posY - 1].color == "W")):
        available.append(Move(self.posX, self.posY, self.posX - 1, self.posY - 1))
    else:
      if board.matrix[self.posX + 1][self.posY] == None:
        available.append(Move(self.posX, self.posY, self.posX + 1, self.posY))
        if(self.posX == 1
        and board.matrix[self.posX + 2][self.posY] == None):
          available.append(Move(self.posX, self.posY, self.posX + 2, self.posY))
      if(self.posY < 7 and
      (not board.matrix[self.posX + 1][self.posY + 1] == None
      and board.matrix[self.posX + 1][self.posY + 1].color == "B")):
        available.append(Move(self.posX, self.posY, self.posX + 1, self.posY + 1))
      if(self.posY > 0 and
      (not board.matrix[self.posX + 1][self.posY - 1] == None
      and board.matrix[self.posX + 1][self.posY - 1].color == "B")):
        available.append(Move(self.posX, self.posY, self.posX + 1, self.posY - 1))
    return available          
  
 
  def is_illegal(self, startX, startY, endX, endY, board):
    if self.color == "B":
      if startY == endY: 
        if(startX - endX == 1 and (board.matrix[endX][endY] == None)):
          return False
        elif(startX - endX == 2
        and (board.matrix[endX][endY] == None)
        and (startX == 6)
        and (board.matrix[startX - 1][startY] == None)):
          return False
        else:
          return True
      elif((startY - endY == 1 or startY - endY == -1)
      and startX - endX == 1
      and not board.matrix[endX][endY] == None
      and not board.matrix[endX][endY].color
      == self.color):
        return False
      else:
        return True
    else:
      
      if(startY == endY):
        
        if(endX - startX == 1 and (board.matrix[endX][endY] == None)):
          return False
        elif((endX - startX == 2)
        and (startX == 1)
        and (board.matrix[endX][endY] == None)
        and (board.matrix[startX + 1][startY] == None)):
          return False
        else:
          return True
      elif((endY - startY == 1 or endY - startY == -1)
      and (endX - startX == 1)
      and not (board.matrix[endX][endY] == None)
      and not (board.matrix[endX][endY].color
      == self.color)):
        return False
      else:
        return True

  def toString(self):
    if self.color == "W":
      return "PW"
    else:
      return "PB"
    


