import Piece
from Move import Move

class Bishop(Piece.Piece):

  def __init__(self, c, px, py):
    self.color = c
    self.posX = px
    self.posY = py
    self.first_move = True
    self.material = 500
    if (self.color == "W"):
      self.string_rep = "BW"
    else:
      self.string_rep = "BB"
    if( self.color == "B"):
      self.table = [-20, -10, -10, -10, -10, -10, -10, -20,
                    -10,   0,   0,   0,   0,   0,   0, -10,
                    -10,   0,   5,  10,  10,   5,   0, -10,
                    -10,   5,   5,  10,  10,   5,   5, -10,
                    -10,   0,  10,  10,  10,  10,   0, -10,
                    -10,  10,  10,  10,  10,  10,  10, -10,
                    -10,   5,   0,   0,   0,   0,   5, -10,
                    -20, -10, -40, -10, -10, -40, -10, -20]
    else:
      self.table = [-20, -10, -40, -10, -10, -40, -10, -20,
                    -10,   5,   0,   0,   0,   0,   5, -10,
                    -10,  10,  10,  10,  10,  10,  10, -10,
                    -10,   0,  10,  10,  10,  10,   0, -10,
                    -10,   5,   5,  10,  10,   5,   5, -10,
                    -10,   0,   5,  10,  10,   5,   0, -10,
                    -10,   0,   0,   0,   0,   0,   0, -10,
                    -20, -10, -10, -10, -10, -10, -10, -20]
      
    self.available_moves = None
    self.attacking = None
    self.refresh_on_change_squares = None
        
        
  def refresh_state(self, board):
    self.available_moves = []
    self.attacking = []
    self.refresh_on_change_squares = []
    
    for i in xrange(1, 8 - self.posX):
      if self.posY + i <= 7:
        if(board.matrix[self.posX + i][self.posY + i] == None):
          self.available_moves += [Move(self.posX,self.posY,self.posX + i, self.posY + i)]
        elif(not board.matrix[self.posX + i][self.posY + i].color == self.color):
          self.available_moves += [Move(self.posX,self.posY,self.posX + i, self.posY + i)]
          self.attacking += [board.matrix[self.posX + i][self.posY + i]]
        self.refresh_on_change_squares += [[self.posX + i, self.posY + i]]
        if (not board.matrix[self.posX + i][self.posY + i] == None):
          break
    for i in xrange(1, 8 - self.posX):
      if self.posY - i >= 0:
        if(board.matrix[self.posX + i][self.posY -i] == None):
          self.available_moves += [Move(self.posX, self.posY, self.posX + i, self.posY - i)]
        elif(not board.matrix[self.posX + i][self.posY - i].color == self.color):
          self.available_moves += [Move(self.posX, self.posY, self.posX + i, self.posY - i)]
          self.attacking += [board.matrix[self.posX + i][self.posY -i]]
        self.refresh_on_change_squares += [[self.posX + i,self.posY -i]]
        if (not board.matrix[self.posX + i][self.posY - i] == None):
          break
    for i in xrange(1, self.posX + 1):
      if self.posY + i <= 7:
        if(board.matrix[self.posX - i][self.posY + i] == None):
          self.available_moves += [Move(self.posX, self.posY, self.posX - i, self.posY + i)]
        elif(not board.matrix[self.posX - i][self.posY + i].color == self.color):
          self.available_moves += [Move(self.posX, self.posY, self.posX - i, self.posY + i)]
          self.attacking += [board.matrix[self.posX - i][self.posY + i]]
        self.refresh_on_change_squares += [[self.posX - i,self.posY + i]]
        if (not board.matrix[self.posX - i][self.posY + i] == None):
          break
    for i in xrange(1, self.posX + 1):
      if self.posY - i >= 0:
        if(board.matrix[self.posX - i][self.posY - i] == None):
          self.available_moves += [Move(self.posX, self.posY, self.posX - i, self.posY - i)]
        elif(not board.matrix[self.posX - i][self.posY - i].color == self.color):
          self.available_moves += [Move(self.posX, self.posY, self.posX - i, self.posY - i)]
          self.attacking += [board.matrix[self.posX - i][self.posY - i]]
        self.refresh_on_change_squares += [[self.posX - i,self.posY - i]]
        if (not board.matrix[self.posX - i][self.posY - i] == None):
          break
