import Piece
from Castle import Castle
from Bishop import Bishop


class Queen(Piece.Piece):
  def __init__(self, c):
    self.color = c
    self.bishop = Bishop(self.color)
    self.castle = Castle(self.color)
 
  def get_available_moves_specific(self, board, px, py):
    posX = px
    posY = py
    available = (self.bishop.get_available_moves(
                   board, posX, posY
                 ) 
    for i in range(1,7):
      if posX + i > 7:
        break
      if(board.matrix[posX + i][posY] == None
      or not board.matrix[posX + i][posY].color == self.color):
        available.append(Move(posX, posY, posX + i, posY))
      if not board.matrix[posX + i][posY] == None:
        break
    for i in range(1,7):
      if posX - i < 0:
        break
      if(board.matrix[posX - i][posY] == None
      or not board.matrix[posX - i][posY].color == self.color):
        available.append(Move(posX, posY, posX - i, posY))
      if not board.matrix[posX - i][posY] == None:
        break
    for i in range(1,7):
      if posY + i > 7:
        break
      if(board.matrix[posX][posY + i] == None
      or not board.matrix[posX][posY + i].color == self.color):
        available.append(Move(posX, posY, posX, posY + i))
      if not board.matrix[posX][posY + i] == None:
        break
    for i in range(1,7):
      if posY - i < 0:
        break
      if(board.matrix[posX][posY - i] == None
      or not board.matrix[posX][posY - i].color == self.color):
        available.append(Move(posX, posY, posX, posY - i))
      if not board.matrix[posX][posY - i] == None:
        break
    return available

  def is_illegal(self, move, board):
    return (self.bishop.is_illegal(move, board)
    and self.castle.is_illegal(move, board))
      

  def toString(self):
    if self.color == "W":
      return "QW"
    else:
      return "QB"

