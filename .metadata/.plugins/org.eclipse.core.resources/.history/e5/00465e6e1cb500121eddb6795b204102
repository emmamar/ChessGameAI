import PlayerWhite

class PlayerBlack:
  '''constructor, takes color and depth'''
  def __init__ (self, dep = 0):
    self.depth = dep

  def quicksort(self, inlist):
    if inlist == []: 
        return []
    else:
        pivot = inlist[0]
        lesser = self.quicksort([x for x in inlist[1:] if x[1] < pivot[1]])
        greater = self.quicksort([x for x in inlist[1:] if x[1] >= pivot[1]])
        return greater + [pivot] + lesser

  def determineNextMove(self, board, ab_list):
    choises_per_piece = [None]*16
    for i in [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]:
      choises_per_piece[i] = board.available_moves_black[i]
    choise_per_piece_flattened = []
    for each_pieces_choise in choises_per_piece:
      if(not each_pieces_choise == None):
        choise_per_piece_flattened += each_pieces_choise
    all_choises_sorted = self.quicksort(choise_per_piece_flattened)
      
    max_heur_of_all_choises = None
    best_choise_of_all = None
    alpha_beta_list = ab_list
    opponent_heur = None
    
    if len(all_choises_sorted) > 0:
      for each_choise in all_choises_sorted:
        if not(self.depth == 0):
          opponent = PlayerWhite.PlayerWhite(self.depth - 1)
          board.try_move_piece_black(each_choise)
          opponent_choise, opponent_heur = opponent.determineNextMove(
            board, alpha_beta_list[1:]
          )
          board.undo()
          if (not opponent_heur == None):
            my_heur_for_choise = -opponent_heur
          else:
            return each_choise, 99999999
        else:
          board.try_move_piece_black(each_choise)
          my_heur_for_choise = -board.white_heuristic
          board.undo()

        if ((not alpha_beta_list[0] == None)
        and alpha_beta_list[0] <= my_heur_for_choise):
          return each_choise, my_heur_for_choise
        if(max_heur_of_all_choises == None):
          max_heur_of_all_choises = my_heur_for_choise
          best_choise_of_all = each_choise
        elif (max_heur_of_all_choises < my_heur_for_choise):
          max_heur_of_all_choises = my_heur_for_choise
          best_choise_of_all = each_choise
        if(not opponent_heur == None):
          if(alpha_beta_list[1] == None
          or alpha_beta_list[1] > opponent_heur):
            alpha_beta_list[1] = opponent_heur
      return best_choise_of_all, max_heur_of_all_choises
    else:
      return None, None 

